#!/usr/bin/env bash

main() {
  if ! is-enabled "${STUNNEL_ENABLED:-1}"; then
    at stunnel-disabled
    exec "$@"
  fi

  at stunnel-enabled
  run-stunnel "$@"
}

run-stunnel() {
  declare sentinel=/tmp/stunnel-buildpack-wait
  declare -A pids signals

  config-gen

  # Use named pipe to detect exit of any subprocess.
  rm -f "$sentinel"
  mkfifo "$sentinel"

  # Start processes.
  aux-start stunnel SIGINT stunnel4 vendor/stunnel/stunnel.conf
  exec "$@"
}

config-gen() {
  # Generate config files
  at config-gen-start
  source bin/stunnel-conf.sh
  at config-gen-end

  # Overwrite config vars with stunnel targets
  for URL in $STUNNEL_URLS; do
    at "config-gen-override $URL"
    eval "$URL=\$${URL}_STUNNEL"
  done
}

aux-start() {
  declare name=$1 signal=$2
  shift 2

  (
    at "$name-start"

    # Ignore SIGTERM; this is inherited by the child process.
    trap '' SIGTERM

    # Start child in the background.
    "$@" &

    # Translate SIGHUP to the appropriate signal to stop the child (anything
    # except SIGTERM which is ignored). This *will* cancel the wait and may
    # lead to the outer subshell exiting before the aux process
    trap "kill -$signal $!" SIGHUP

    # Wait for child to finish, either by crash or by $signal
    wait

    # Notify FIFO if this finishes first
    echo "$name" > "$sentinel"

    at "$name-end"
  ) &

  pids[$name]=$!
  signals[$name]=$signal
  at "$name-launched pid=$! signal=$signal"
}

at() {
  echo "buildpack=stunnel at=$*"
}

is-enabled() {
  ( shopt -s extglob nocasematch
    [[ $1 == @(1|true|yes|on) ]]
  )
}

[[ "$0" != "$BASH_SOURCE" ]] || main "$@"
